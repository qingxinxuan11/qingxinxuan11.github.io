<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[CSS之图片居中]]></title>
      <url>http://yoursite.com/2016/05/13/CSS%E4%B9%8B%E5%9B%BE%E7%89%87%E5%B1%85%E4%B8%AD/</url>
      <content type="html"><![CDATA[<h3 id="我们在做一些网购界面的时候难免会遇到各种图片的展示框的居中问题，但是很多情况下图片的大小并不能保持一致，但是我们又要居中显示（为了美观），而我们并不会针对每一张图片去修改居中问题，那么来看一下如何解决这类问题呢？"><a href="#我们在做一些网购界面的时候难免会遇到各种图片的展示框的居中问题，但是很多情况下图片的大小并不能保持一致，但是我们又要居中显示（为了美观），而我们并不会针对每一张图片去修改居中问题，那么来看一下如何解决这类问题呢？" class="headerlink" title="我们在做一些网购界面的时候难免会遇到各种图片的展示框的居中问题，但是很多情况下图片的大小并不能保持一致，但是我们又要居中显示（为了美观），而我们并不会针对每一张图片去修改居中问题，那么来看一下如何解决这类问题呢？"></a>我们在做一些网购界面的时候难免会遇到各种图片的展示框的居中问题，但是很多情况下图片的大小并不能保持一致，但是我们又要居中显示（为了美观），而我们并不会针对每一张图片去修改居中问题，那么来看一下如何解决这类问题呢？</h3><h1 id="CSS之图片居中"><a href="#CSS之图片居中" class="headerlink" title="CSS之图片居中"></a>CSS之图片居中</h1><p>代码其实很简单，如下<br><a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;div1&quot;&gt;</span><br><span class="line">	&lt;img src=&quot;你的图片路径&quot; alt=&quot;&quot;&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">	.div1&#123;</span><br><span class="line">		width: 500px;</span><br><span class="line">		height: 300px;/* 我们假设展示框的宽高分别是500px和300px */</span><br><span class="line">		text-align: center;/* 设置框内内容水平居中 */</span><br><span class="line">		display: table-cell;/* 将框内内容转换成table元素（方便垂直居中） */</span><br><span class="line">		vertical-align: middle;/* 实现垂直居中 */</span><br><span class="line">	&#125;</span><br><span class="line">	.div img&#123;</span><br><span class="line">		max-width: 100%;</span><br><span class="line">		max-height: 100%;/* 这两句话：图片要么宽度最宽与展示框宽度一样，   要么高度与展示框高度一样，要么就自己宽高不变，三种情况会自己判断选择 */</span><br><span class="line">	&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></p>
<h2 id="具体展示如下"><a href="#具体展示如下" class="headerlink" title="具体展示如下"></a>具体展示如下</h2><p><img src="http://o70mrjf9r.bkt.clouddn.com/WeChat_1463108374.jpeg" alt=""><br><img src="http://o70mrjf9r.bkt.clouddn.com/WeChat_1463108476.jpeg" alt=""><br><img src="http://o70mrjf9r.bkt.clouddn.com/WeChat_1463108221.jpeg" alt=""></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[伪元素]]></title>
      <url>http://yoursite.com/2016/05/12/%E4%BC%AA%E5%85%83%E7%B4%A0/</url>
      <content type="html"><![CDATA[<h1 id="css之伪元素"><a href="#css之伪元素" class="headerlink" title="css之伪元素"></a>css之伪元素</h1><h3 id="伪类"><a href="#伪类" class="headerlink" title="伪类"></a>伪类</h3><p>我们先来说说伪类吧，它是一种状态，不是一个元素，基本的伪类有4种，分别是link、visited、hover、active。<br>link：适用于未被访问的链接<br>visited：和link相反，适用于被访问的链接<br>hover：可以定义鼠标移入时的效果，但是元素未被激活，例如用户的鼠标移至一个元素时，给当前元素设定一个效果。当用户鼠标离开元素时，恢复元素原有的样式显示。<br>active：适用于元素被激活时的样式，例如用户在按下鼠标之后，给元素一个效果，当用户放开鼠标后，恢复元素原有的样式。<br><a id="more"></a></p>
<h3 id="伪元素"><a href="#伪元素" class="headerlink" title="伪元素"></a>伪元素</h3><p>基本常用的伪元素包括::first-line、::before、::after、::section、::first-letter<br>1、::first-line 匹配的是第一行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul class=&quot;text&quot;&gt;</span><br><span class="line">	&lt;li&gt;First line&lt;/li&gt;</span><br><span class="line">	&lt;li&gt;Second line&lt;/li&gt;</span><br><span class="line">	&lt;li&gt;Third line&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt; </span><br><span class="line">&lt;style&gt;</span><br><span class="line">	.text::first-line&#123;</span><br><span class="line">		color: red;	</span><br><span class="line">	&#125;	</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></p>
<p>以上代码输出First line的字体颜色是红色    </p>
<p>2、::first-letter 匹配的是第一个字符<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;p&gt;ABCDEF&lt;/p&gt; </span><br><span class="line">&lt;style&gt;</span><br><span class="line">	p::first-letter&#123;</span><br><span class="line">		color: red;</span><br><span class="line">	&#125;	</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></p>
<p>以上代码输出A是红色的</p>
<p>3、::before 匹配的是该元素的之前的内容 和::after 匹配的是该元素的之后的内容<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;&lt;/div&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">	div::before&#123;</span><br><span class="line">		content: &apos;前内容&apos;;//引号中可以添加你需要在元素之前插入的内容，若无内容，该语句也不能省略！</span><br><span class="line">	&#125;</span><br><span class="line">	div::after&#123;</span><br><span class="line">		content: &apos;后内容&apos;;</span><br><span class="line">	&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></p>
<p>以上代码是在div之前插入前内容，在其之后插入后内容    </p>
<p>4、::section 该元素作用是自定义鼠标选择样式<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">	::selection&#123;</span><br><span class="line">		background-color: blue;</span><br><span class="line">	&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></p>
<p>该代码作用是自定义选中时,背景颜色是蓝色   </p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[正则之一二事]]></title>
      <url>http://yoursite.com/2016/05/12/%E6%AD%A3%E5%88%99%E4%B9%8B%E4%B8%80%E4%BA%8C%E4%BA%8B/</url>
      <content type="html"><![CDATA[<h3 id="本人也是刚接触正则，跟大家感受其实一样，咋看就是火星文，但是花点耐心研究一下其实还是不难懂的，个人觉得正则难读不难写。"><a href="#本人也是刚接触正则，跟大家感受其实一样，咋看就是火星文，但是花点耐心研究一下其实还是不难懂的，个人觉得正则难读不难写。" class="headerlink" title="本人也是刚接触正则，跟大家感受其实一样，咋看就是火星文，但是花点耐心研究一下其实还是不难懂的，个人觉得正则难读不难写。"></a>本人也是刚接触正则，跟大家感受其实一样，咋看就是火星文，但是花点耐心研究一下其实还是不难懂的，个人觉得正则难读不难写。</h3><h1 id="火星文之正则浅谈"><a href="#火星文之正则浅谈" class="headerlink" title="火星文之正则浅谈"></a>火星文之正则浅谈</h1><p>定义正则一般的格式</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">	var reg = /\b/i;// 通常是反斜杠中写入内容，例/b/就等同于&quot;b&quot;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[jQuery之基础]]></title>
      <url>http://yoursite.com/2016/03/12/jQuery%E4%B9%8B%E5%9F%BA%E7%A1%80/</url>
      <content type="html"></content>
    </entry>
    
    <entry>
      <title><![CDATA[JS之基础]]></title>
      <url>http://yoursite.com/2016/02/02/JS%E4%B9%8B%E5%9F%BA%E7%A1%80/</url>
      <content type="html"><![CDATA[<h1 id="JS-基础知识之组成"><a href="#JS-基础知识之组成" class="headerlink" title="JS 基础知识之组成"></a>JS 基础知识之组成</h1><p>1、ECMAscript－提供核心语言的功能性和基础<br>2、Dom－提供访问和操作网页的内容和方法的接口<br>3、Bom－提供与浏览器交互的方法和接口<br><a id="more"></a></p>
<h1 id="JS-基础之数据类型"><a href="#JS-基础之数据类型" class="headerlink" title="JS 基础之数据类型"></a>JS 基础之数据类型</h1><p>1、undefined：未定义的<br>2、number：数字类型<br>3、string：字符串类型<br>4、boolean：布尔类型<br>5、function：函数类型<br>6、object：对象类型包括数组、null、字符串</p>
<h1 id="JS-基础之标示符"><a href="#JS-基础之标示符" class="headerlink" title="JS 基础之标示符"></a>JS 基础之标示符</h1><p>标示符指的是变量、函数、属性的名字或者函数的参数<br>命名首字符必须是字母、下划线、$、不能有空格且不能为关键字和保留字    </p>
<h1 id="JS-基础之运算符"><a href="#JS-基础之运算符" class="headerlink" title="JS 基础之运算符"></a>JS 基础之运算符</h1><p>1、赋值运算符：=<br>2、算术运算符：= - * /<br>3、关系操作符：&gt; &lt; == &lt;= &gt;=<br>4、逻辑运算符：&amp;&amp;(与) ||(或) !(非)<br>5、递增递减：++ – ++i先运算再赋值 i++先赋值再运算   </p>
<h1 id="JS-基础之操作优先级"><a href="#JS-基础之操作优先级" class="headerlink" title="JS 基础之操作优先级"></a>JS 基础之操作优先级</h1><p>逻辑非&gt;算数操作符&gt;逻辑与或&gt;条件运算&gt;赋值       </p>
<h1 id="JS-Boolean真假判断"><a href="#JS-Boolean真假判断" class="headerlink" title="JS Boolean真假判断"></a>JS Boolean真假判断</h1><p>true:非零数字，非空字符串<br>false:数字0，空字符串“”，空对象null，undefined，NaN   </p>
<h1 id="JS-基础之获取标签"><a href="#JS-基础之获取标签" class="headerlink" title="JS 基础之获取标签"></a>JS 基础之获取标签</h1><p>我们常用的获取标签方式一般有以下几种：<br>1、document.getElementById();通过获取标签的ID来获取标签［常用］<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">document.getElementById(&apos;id&apos;);</span><br></pre></td></tr></table></figure></p>
<p>2、document.getElementsByTagName();通过获取标签的name名来获取标签（其返回的是一个数组）［常用］    </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">document.getElementsByTagName(&apos;li&apos;);</span><br></pre></td></tr></table></figure>
<p>3、document.getElementsByClassName();通过获取标签的class名来获取标签（其返回的是一个数组） </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">document.getElementsByClassName(&apos;class&apos;);</span><br></pre></td></tr></table></figure>
<p>4、document.getElementsByName();通过获取标签的name名来获取标签（其返回的是一个数组）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">document.getElementsByTagName(&apos;name&apos;);</span><br></pre></td></tr></table></figure>
<p>5、document.querySelector();接受css选择器作为参数，返回DOM中匹配的第一个元素［新增］ </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">document.querySelector(&apos;.class&apos;);</span><br></pre></td></tr></table></figure>
<p>6、document.querySelectorAll();接受css选择器作为参数，返回DOM中匹配的集合数组<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">document.querySelectorAll(&apos;.box .top&apos;);</span><br></pre></td></tr></table></figure></p>
<h1 id="JS-基础之常用语法"><a href="#JS-基础之常用语法" class="headerlink" title="JS 基础之常用语法"></a>JS 基础之常用语法</h1><p>1、if判断语法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">if(判断语句1)&#123;   </span><br><span class="line">	判断为真执行语句2;   </span><br><span class="line">&#125;else&#123;   </span><br><span class="line">	判断为假执行语句3;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>2、for循环<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">for(表达式1;判断表达式2;表达式3)&#123;   </span><br><span class="line">	语句1;...   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>该执行顺序为表达式1到判断表达式2，若其为真，执行语句1，再执行表达式3；若其为假，则退出循环。  </p>
<p>3、while循环语句<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">while(判断语句)&#123;   </span><br><span class="line">	判断语句为真执行语句；   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>4、switch语句<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">switch(n)&#123;</span><br><span class="line">	case 1:   </span><br><span class="line">	执行代码块1;   </span><br><span class="line">	case 2:     </span><br><span class="line">	执行代码块2;   </span><br><span class="line">	case 3:      </span><br><span class="line">	执行代码块3;   </span><br><span class="line">	...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h1 id="JS-基础之定时器"><a href="#JS-基础之定时器" class="headerlink" title="JS 基础之定时器"></a>JS 基础之定时器</h1><p>如果你想让一个元素动起来，那你一定需要用到定时器；<br>1、一次性定时器： </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var timer=setTimeout(fn,1000);//设置一次性定时器，fn代表函数，1000代表1s后只执行1次；   </span><br><span class="line">clearTimeout(timer);//清除一次性定时器；</span><br></pre></td></tr></table></figure>
<p>2、循环定时器：   </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var timer=setTimeInterval(fn,1000);//设置一次性定时器，fn代表函数，1000代表1s每执行1次；   </span><br><span class="line">clearTimeInterval(timer);//清除一次性定时器；</span><br></pre></td></tr></table></figure>
<h1 id="Js基础之类型转换"><a href="#Js基础之类型转换" class="headerlink" title="Js基础之类型转换"></a>Js基础之类型转换</h1><p>1、parseInt()把值转换成整数</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">parseInt(&quot;1234blue&quot;); //returns 1234   </span><br><span class="line">parseInt(&quot;22.5&quot;); //returns 22   </span><br><span class="line">parseInt(&quot;blue&quot;); //returns NaN</span><br></pre></td></tr></table></figure>
<p>2、parseFloat()把值转换成浮点数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">parseFloat(&quot;1234blue&quot;); //returns 1234.0   </span><br><span class="line">parseFloat(&quot;22.5&quot;); //returns 22.5   </span><br><span class="line">parseFloat(&quot;22.34.5&quot;); //returns 22.34   </span><br><span class="line">parseFloat(&quot;0908&quot;); //returns 908   </span><br><span class="line">parseFloat(&quot;blue&quot;); //returns NaN</span><br></pre></td></tr></table></figure></p>
<p>以上只有对string类型调用这些方法这两个函数才会正常运行，对其他的类型都返回NaN<br>3、Boolean(value)–把给定的值转换为Boolean型  </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Boolean(&quot;&quot;); //false – empty string   </span><br><span class="line">Boolean(&quot;hi&quot;); //true – non-empty   </span><br><span class="line">string Boolean(100); //true – non-zero number   </span><br><span class="line">Boolean(null); //false - null   </span><br><span class="line">Boolean(0); //false - zero   </span><br><span class="line">Boolean(new Object()); //true – object</span><br></pre></td></tr></table></figure>
<p>4、Number(value)–把给定的值转换成数字   </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Number(false) 0   </span><br><span class="line">Number(true) 1   </span><br><span class="line">Number(undefined) NaN   </span><br><span class="line">Number(null) 0   </span><br><span class="line">Number( &quot;5.5 &quot;) 5.5   </span><br><span class="line">Number( &quot;56 &quot;) 56   </span><br><span class="line">Number( &quot;5.6.7 &quot;) NaN   </span><br><span class="line">Number(new Object()) NaN</span><br></pre></td></tr></table></figure>
<p>5、String(value)—把给定的值转换成字符串   </p>
<h1 id="JS基础之常用字符串操作"><a href="#JS基础之常用字符串操作" class="headerlink" title="JS基础之常用字符串操作"></a>JS基础之常用字符串操作</h1><p>1、charAt:返回字符串的某一位<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var str=&quot;abcdef&quot;;</span><br><span class="line">console.log(str.charAt(3));//d</span><br></pre></td></tr></table></figure></p>
<p>2、search查找返回位置，若找不到返回－1；<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var str=&quot;abcdef&quot;;</span><br><span class="line">console.log(str.search(&quot;b&quot;));//1</span><br><span class="line">console.log(str.seatch(&quot;g&quot;));//-1</span><br></pre></td></tr></table></figure></p>
<p>3、substring(start,end)返回一个新的字符串，参数为非负整数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var str=&quot;abcdef&quot;;</span><br><span class="line">console.log(substring(1,3));//bc</span><br></pre></td></tr></table></figure></p>
<p>4、slice(start,end)方法可提取字符串的某个部分，并以新的字符串返回被提取的的部分。（负数的时候从后往前截取，用法同上，只不过可以从后往前提取）</p>
<p>5、substr(start,length)方法可在字符串中抽取从start下标开始的指定数目的的字符<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var str=&quot;abcdef&quot;;</span><br><span class="line">console.log(substr(1,3));//bcd</span><br></pre></td></tr></table></figure></p>
<p>6、replace()方法用于在字符串中用一些字符替换另一些字符，或替换一个与正则表达式匹配的子串<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var str=“abcdef&quot;</span><br><span class="line">console.log(str.replace(“a”,”123”))//“123bcdef&quot;</span><br></pre></td></tr></table></figure></p>
<p>7、split()方法用于把一个字符串分割成字符串组，一般和正则一起用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var str=“ab ac def&quot;</span><br><span class="line">console.log(str.split(“”,5))//“a,b,,a,c&quot;</span><br><span class="line">//console.log(str.split(“”,length))//第一个参数为字符串或正则</span><br></pre></td></tr></table></figure></p>
<p>8、concat字符串拼接<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var str=“abcdef&quot;</span><br><span class="line">var str1=“123456&quot;</span><br><span class="line">console.log(str.concat(str1));//“abcdef123456&quot;</span><br></pre></td></tr></table></figure></p>
<p>9、indexOf,lastindexOf()获取字符串的位置，如果没有返回－1<br>indexOf()方法可返回某个指定的字符串值在字符串中首次出现的位置<br>lastindexOf()方法可返回一个指定的字符串值最后出现的位置，在一个字符串中的指定位置从后向前搜索<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var str=“abcdef&quot;</span><br><span class="line">console.log(str.indexOf(“a”))//0</span><br><span class="line">console.log(str.lastindexOf(“a”))//2</span><br></pre></td></tr></table></figure></p>
<p>10、push(元素):向数组的末尾添加一个或多个元素，并返回新的长度<br>unshift(元素):向数组的开头添加一个或多个元素，并返回新的长度<br>pop(元素)方法用于删除数组的最后一个元素<br>shift(元素)方法用于删除数组的第一个元素</p>
<p>11、数组元素的替换<br>splice(起始位置，长度，添加的内容（可选）)   从起始位置开始，删除长度个元素<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var arr=[“1”,”2”,”3”,”4&quot;]</span><br><span class="line">arr.splice(0,2,”0&quot;)</span><br><span class="line">console.log(arr)//[“0”,”3”,”4&quot;]</span><br></pre></td></tr></table></figure></p>
<p>12、数组的排序sort()<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">console.log(arr.sort(function(a,b)&#123;return a-b&#125;))从小到大排列</span><br><span class="line">console.log(arr.sort(function(a,b)&#123;return b-a&#125;))从大到小排列</span><br></pre></td></tr></table></figure></p>
<p>13、join()数组元素之间添加分隔符<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var arr=[“1”,”2”,”3”]</span><br><span class="line">console.log(arr. join(“/“))//[1//2//3]</span><br></pre></td></tr></table></figure></p>
<p>待更</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[blog平台的搭建]]></title>
      <url>http://yoursite.com/2016/01/11/blog%E5%B9%B3%E5%8F%B0%E7%9A%84%E6%90%AD%E5%BB%BA/</url>
      <content type="html"><![CDATA[<h1 id="怎样搭建自己的blog平台？"><a href="#怎样搭建自己的blog平台？" class="headerlink" title="怎样搭建自己的blog平台？"></a>怎样搭建自己的blog平台？</h1><a id="more"></a>
<h2 id="node-js官网https-nodejs-org-en"><a href="#node-js官网https-nodejs-org-en" class="headerlink" title="node.js官网https://nodejs.org/en/"></a>node.js官网<a href="https://nodejs.org/en/" target="_blank" rel="external">https://nodejs.org/en/</a></h2><p>1、从以上网址下载并安装node.js搭建环境<br>判断node是否安装成功？打开电脑终端，在里面输入node，按下回车，若出现尖括号输入则表示安装成功<br>2、搭建hexo环境：在终端执行sudo npm install -g hexo  </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xxMacBook-Pro:blog user$ sudo npm install -g hexo</span><br></pre></td></tr></table></figure>
<p>3、在终端执行mkdir blog以创建一个blog文件夹用来承载所有的blog文件 </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xxMacBook-Pro:blog user$  mkdir blog(名字可自己取)</span><br></pre></td></tr></table></figure>
<p>4、创建blog环境，在终端执行hexo init    </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xxMacBook-Pro:blog user$ hexo init</span><br></pre></td></tr></table></figure>
<p>5、创建新的blog文章，在终端执行hexo new xxxname(文件名) </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xxMacBook-Pro:blog user$  hexo new first</span><br></pre></td></tr></table></figure>
<p>6、本地运行，终端执行hexo server   </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xxMacBook-Pro:blog user$  hexo server</span><br></pre></td></tr></table></figure>
<h1 id="NPM插件的上传和使用（依赖nodejs的环境）"><a href="#NPM插件的上传和使用（依赖nodejs的环境）" class="headerlink" title="NPM插件的上传和使用（依赖nodejs的环境）"></a>NPM插件的上传和使用（依赖nodejs的环境）</h1><h3 id="NPM官网https-www-npmjs-com"><a href="#NPM官网https-www-npmjs-com" class="headerlink" title="NPM官网https://www.npmjs.com/"></a>NPM官网<a href="https://www.npmjs.com/" target="_blank" rel="external">https://www.npmjs.com/</a></h3><p>我们可以在NPM官网直接下载引用插件，你可以在搜索栏里搜索你需要的标签，在终端直接引入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install name --save//安装插件将新鲜写入package.json中</span><br></pre></td></tr></table></figure></p>
<p>有关npm的相关常用操作</p>
<p>npm init  会引导你创建一个package.json文件，包括名称、版本、作者这些信息等   </p>
<p>npm remove name 移除   </p>
<p>npm update name更新   </p>
<p>npm ls 列出当前安装的了所有包   </p>
<p>npm root 查看当前包的安装路径   </p>
<p>npm root -g  查看全局的包的安装路径   </p>
<p>npm help  帮助，如果要单独查看install命令的帮助，可以使用的npm help install   </p>
<p>关于创建并上传NPM插件</p>
<p>1、创建一个npm的package.json文件，在终端执行npm init，会自动引导你创建<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xxMacBook-Pro:blog user$ npm init</span><br></pre></td></tr></table></figure></p>
<p>2、npm创建账户，会要求你输入账户名和密码，输密码没有任何提示，输完回车即可<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xxMacBook-Pro:blog user$ npm adduser</span><br></pre></td></tr></table></figure></p>
<p>3、发布你写的npm插件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xxMacBook-Pro:blog user$ npm publish</span><br></pre></td></tr></table></figure></p>
<p>同样如果你想要删除你写的npm标签在终端执行以操作<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xxMacBook-Pro:blog user$  npm unpublish</span><br></pre></td></tr></table></figure></p>
<h1 id="怎样搭建二级服务器上传自己的blog？"><a href="#怎样搭建二级服务器上传自己的blog？" class="headerlink" title="怎样搭建二级服务器上传自己的blog？"></a>怎样搭建二级服务器上传自己的blog？</h1><h3 id="首先我们需要创建一个github账号，github官网https-github-com"><a href="#首先我们需要创建一个github账号，github官网https-github-com" class="headerlink" title="首先我们需要创建一个github账号，github官网https://github.com/"></a>首先我们需要创建一个github账号，github官网<a href="https://github.com/" target="_blank" rel="external">https://github.com/</a></h3><p>1、有了账号我们需要创建一个仓库即repository，该名字必须是你的用户名.github.io<br>2、创建一个密匙，先在终端执行 ssh-keygen，获取密匙，再执行 vim ~/.ssh/id_rsa.pub 查看密匙，复制所有的英文，点击Settings里面的SSH and GPG keys中的 NEW SSH   key，将复制的内容粘贴到key中，并在title中取名<br>3、在终端执行 npm install hexo-deployer-git —save以安装插件，之后你需要输入你在github注册的账号和密码（输密码没有任何提示，记得自己输入正确就确定）   </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xxMacBook-Pro:blog user$ npm install hexo-deployer-git —save</span><br></pre></td></tr></table></figure>
<p>4、在终端执行克隆操作 git clone 你创建仓库的SSH类型的url   </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xxMacBook-Pro:blog user$ git clone git@github.com:xxx/html.git</span><br></pre></td></tr></table></figure>
<p>5、在这里执行本地blog的操作<br>6、你可以通过执行git status获取当前的修改状态，git add .添加修改状态，git commit -m”修改日志”等操作   </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xxMacBook-Pro:blog user$ git add .</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xxMacBook-Pro:blog user$  git commit -m&quot;我修改了哪部分内容&quot;</span><br></pre></td></tr></table></figure>
<p>7、将修改上传至暂存区，在终端执行git remote add origin 你创建仓库的SSH类型的url 和 git push -u origin master   </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xxMacBook-Pro:blog user$  git remote add origin git@github.com:xxx/html.git</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xxMacBook-Pro:blog user$  git  push -u origin master</span><br></pre></td></tr></table></figure>
<p>8、输入你的github账号和邮箱，在终端执行 git config –global user.name “xxx” 和 git config –global user.email eamil  </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xxMacBook-Pro:blog user$  git config --global user.name &quot;xxx&quot;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xxMacBook-Pro:blog user$  git config --global user.email eamil</span><br></pre></td></tr></table></figure>
<p>9、上传只服务器在终端执行hexo g和hexo d  </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xxMacBook-Pro:blog user$ hexo g</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xxMacBook-Pro:blog user$ hexo d</span><br></pre></td></tr></table></figure>
<p>10、复制你创建的链接即可进入你编辑的博客    </p>
<p>以下是思维导图<img src="http://o70mrjf9r.bkt.clouddn.com/blog%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE.jpeg
" alt="思维导图"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[myDream]]></title>
      <url>http://yoursite.com/2016/01/01/myDream/</url>
      <content type="html"><![CDATA[<h1 id="2017年的梦想"><a href="#2017年的梦想" class="headerlink" title="2017年的梦想"></a>2017年的梦想</h1><h2 id="有你"><a href="#有你" class="headerlink" title="有你"></a>有你</h2><p><img src="http://big5.southcn.com/gate/big5/car.southcn.com/7/images/attachement/jpg/site4/20160426/c89cdcf39c3b1888fc721c.jpg" alt="马自达CX—4"></p>
<h2 id="当然还有你"><a href="#当然还有你" class="headerlink" title="当然还有你"></a>当然还有你</h2><p><img src="http://img.xmfish.com/attachment/thumb/Mon_1204/121_257399_5191938e0bce2c7.jpg" alt="阿拉斯加"></p>
]]></content>
    </entry>
    
  
  
</search>
